@page "/status"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using MqttFrontend.Data
@using System
@inject AuthenticationService AuthenticationService

<PageTitle>Status</PageTitle>

<p style="color: red;">@errorCode</p>

@if (loading && errorCode != "") return;

@if (AuthenticationService.ApiUrl is null || AuthenticationService.Token is null) {
    <p><em>Not connected to API! (use fetch data page to authenticate)</em></p>
    return;
}

@if (loading) {
    <p><em>Loading...</em></p>
} else {
    <h2>API server status: @apiResponding</h2>
    <h2>Database status: @dataBaseStatus</h2>
    <h2>ESP32 status: @esp32Status</h2>
    <h2>Light status: @lightStatus</h2>


    <button class="btn btn-primary" @onclick="ToggleLight">Toggle light</button>
    
}

@code {
    private string errorCode = "";
    private bool loading = true;
    private bool apiResponding = false;
    private bool dataBaseStatus = false;
    private bool esp32Status = false;
    private bool lightStatus = false;
    protected override async Task OnInitializedAsync() {
        apiResponding = await CheckApiStatus();
        if (!apiResponding) StateHasChanged();
    }


    private async Task<bool> CheckApiStatus() {
        try {
            if (AuthenticationService.ApiUrl is null || AuthenticationService.Token is null) return false;

            using HttpClient client = new();
            HttpResponseMessage response = await client.GetAsync(AuthenticationService.ApiUrl);

            return true;
        } catch (Exception ex) {
            errorCode = ex.Message;
            return false;
        }
    }
    

    private async Task ToggleLight() {
        try {
            using HttpClient client = new();

            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + AuthenticationService.Token);
            HttpResponseMessage response = await client.GetAsync(AuthenticationService.ApiUrl + $"toggleLight?status={!lightStatus}");

            if (response.StatusCode == System.Net.HttpStatusCode.BadRequest) throw new Exception("Request error");
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized) throw new Exception("Invalid credientials");
            if (!response.IsSuccessStatusCode) throw new Exception("Server error");

            lightStatus = !lightStatus;
        } catch (Exception ex) {
            errorCode = ex.Message;
        }
        StateHasChanged();
    }
}