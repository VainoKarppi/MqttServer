@page "/fetchdata"
@using Microsoft.AspNetCore.Components.Forms
@using MqttFrontend.Data
@using System
@inject WeatherForecastService ForecastService
@inject AuthenticationService AuthenticationService

<PageTitle>Weather forecast</PageTitle>

<h1>Weather data</h1>

@if (user is null && connecting) {
    <p><em>Connecting...</em></p>
    return;
}

@if (user is null) {
    <p><em>You are not authorized!</em></p>
    <p>Enter API URL</p>
    <InputText @bind-Value="ApiUrl" />
    <br><br>
    <p>Enter API key</p>
    <InputText @bind-Value="ApiKey" />
    <br><br>
    <button class="btn btn-primary" @onclick="UpdateAPIData">Connect</button>
    <br><br>
    <p style="color: red;">@errorCode</p>

    return;
}

<p><em>You are authorized!</em></p>


@if (forecasts == null) {
    <p><em>Loading...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private WeatherForecast[]? forecasts;
    private AuthenticationService.User? user;
    private bool connecting = true;
    private string? ApiKey = AuthenticationService.Token;
    private string ApiUrl = "http://localhost:5000";
    private string errorCode = "";

    
    protected override async Task OnInitializedAsync() {
        try {
            user = await AuthenticationService.Authenticate()!;
            forecasts = await ForecastService.GetForecastAsync();
        } catch (Exception ex) {
            errorCode = ex.Message;
        }
        connecting = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstrender) {
        if (!firstrender && forecasts is null) forecasts = await ForecastService.GetForecastAsync();
    }

    
    private async Task UpdateAPIData() {
        try {
            connecting = true;
            await UpdateApiURL();
            await UpdateApiKey();
            user = await AuthenticationService.Authenticate()!;
        } catch (Exception ex) {
            errorCode = ex.Message; 
        }
        connecting = false;
        StateHasChanged();
    }
    private async Task UpdateApiKey() {
        if (ApiKey is null || ApiKey.Length != 36) throw new Exception("Invalid API key!");
        await AuthenticationService.UpdateApiKey(ApiKey);
    }
    private async Task UpdateApiURL() {
        if (string.IsNullOrWhiteSpace(ApiUrl)) throw new Exception("Invalid API URL!");
        await AuthenticationService.UpdateApiUrl(ApiUrl);
    }
}
