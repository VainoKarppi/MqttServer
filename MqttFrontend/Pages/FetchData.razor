@page "/fetchdata"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using MqttFrontend.Data
@using System
@inject WeatherForecastService ForecastService
@inject AuthenticationService AuthenticationService

<PageTitle>Weather forecast</PageTitle>

<h1>Weather data</h1>

@if (user is null && connecting) {
    <p><em>Connecting...</em></p>
    return;
}

@if (user is null) {
    <p><em>You are not authorized!</em></p>
    <p>Enter API URL</p>
    <InputText @bind-Value="ApiUrl" />
    <br><br>
    <p>Enter API key</p>
    <InputText @bind-Value="ApiKey" />
    <br><br>
    <button class="btn btn-primary" @onclick="UpdateAPIData">Connect</button>
    <br><br>
    <p style="color: red;">@errorCode</p>

    return;
}

<p><em>You are authorized!</em></p>

<p style="color: red;">@errorCode</p>

@if (forecasts == null) {
    <p><em>Loading...</em></p>
} else {
    
    <label>Start Date</label>
    <InputDate style="max-width: 150px;" class="form-control" @bind-Value="@startDate" />
    <br>
    <label>End Date</label>
    <InputDate style="max-width: 150px;" class="form-control" @bind-Value="@endDate"/>
    <a>Use time set <InputCheckbox @bind-Value="useTime" /></a>
    <br>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Humidity</th>
                <th>Temp. (C)</th>
                <th>Wind</th>
                <th>Pressure</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date</td>
                    <td>@forecast.Humidity</td>
                    <td>@forecast.Temperature</td>
                    <td>@forecast.Wind</td>
                    <td>@forecast.Pressure</td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private bool loadingComplete = true;
    private bool useTime = false;
    private DateTime startDate = DateTime.Now.AddDays(-1);
    private DateTime endDate = DateTime.Now;
    private WeatherForecastService.WeatherData[]? forecasts;
    private AuthenticationService.User? user;
    private bool connecting = true;
    private string? ApiKey = AuthenticationService.Token; // TODO store api key to local cache
    private string? ApiUrl = AuthenticationService.ApiUrl;
    private string errorCode = "";
    private bool skipNextRender = false;

    protected override async Task OnInitializedAsync() {
        try {
            user = await AuthenticationService.Authenticate()!;
            errorCode = "";
            StateHasChanged();
        } catch (Exception ex) {
            Console.WriteLine(ex);
            errorCode = ex.Message;
        }
        connecting = false; 
    }

    
    protected override async Task OnAfterRenderAsync(bool firstrender) {
        try {
            if (skipNextRender || firstrender) {
                skipNextRender = false;
                return;
            };
            if (user is null) return;
            skipNextRender = true;

            if (useTime) {
                if (startDate > endDate) {
                    forecasts = [];
                    throw new Exception("End date cannot be lower than start date!");
                }
                forecasts = await ForecastService.GetForecastAsync(user.Token!,DateOnly.FromDateTime(startDate),DateOnly.FromDateTime(endDate));
            } else {
                forecasts = await ForecastService.GetForecastAsync(user.Token!);
            }

            errorCode = "";
        } catch (Exception ex) {
            Console.WriteLine(ex);
            errorCode = ex.Message;
        }
        StateHasChanged();
    }

    private async Task UpdateAPIData() {
        try {
            connecting = true;
            await UpdateApiURL();
            await UpdateApiKey();
            user = await AuthenticationService.Authenticate()!;
            errorCode = "";
        } catch (Exception ex) {
            Console.WriteLine(ex);
            errorCode = ex.Message; 
        }
        connecting = false;
    }
    private async Task UpdateApiKey() {
        if (ApiKey is null || ApiKey.Length != 36) throw new Exception("Invalid API key!");
        await AuthenticationService.UpdateApiKey(ApiKey);
    }
    private async Task UpdateApiURL() {
        if (string.IsNullOrWhiteSpace(ApiUrl)) throw new Exception("Invalid API URL!");
        await AuthenticationService.UpdateApiUrl(ApiUrl);
    }
}
